import type { NextPage } from "next";
import Head from "next/head";
import { Flex, Button, Text, Heading, Image, Input } from "@chakra-ui/react";
import { useState, useEffect, ChangeEvent } from "react";
import { TEST_GIFS } from "../constants/testGifs";
import {
	Connection,
	PublicKey,
	clusterApiUrl,
	ConfirmOptions,
} from "@solana/web3.js";
import { Program, AnchorProvider, web3 } from "@project-serum/anchor";

const Home: NextPage = () => {
	const [walletAddress, setWalletAddress] = useState<string>();
	const [inputValue, setInputValue] = useState("");
	const [gifList, setGifList] = useState([]);

	const { SystemProgram, Keypair } = web3;
	let baseAccount = Keypair.generate();
	const programID = new PublicKey(
		"R9HPKyMYuypB6VyHJKVKegjDnKCpUHYfNPHfa7W5ovv"
	);
	const network = clusterApiUrl("devnet");
	const opts: ConfirmOptions = {
		preflightCommitment: "processed",
		maxRetries: 100
	};

	const onInputChange = (event: ChangeEvent<HTMLInputElement>) => {
		setInputValue(event.target.value);
	};

	const getProvider = () => {
		const connection = new Connection(network, opts.preflightCommitment);
		const provider = new AnchorProvider(
			connection,
			//@ts-ignore
			window.solana,
			opts
		);
		return provider;
	};

	const createGifAccount = async () => {
		try {
			const provider = getProvider();
			const program = await getProgram();

			if(program) {
				console.log("ping",await program.methods
				.initialize()
				.accounts({
					baseAccount: baseAccount.publicKey,
					user: provider.wallet.publicKey,
					systemProgram: SystemProgram.programId,
				})
				.signers([baseAccount])
				.rpc());
				await program.methods
				.startStuffOff()
				.accounts({
					baseAccount: baseAccount.publicKey,
					user: provider.wallet.publicKey,
					systemProgram: SystemProgram.programId,
				})
				.signers([baseAccount])
				.rpc();
				console.log(
					"Created a new BaseAccount w/ address:",
					baseAccount.publicKey.toString()
				);
				await getGifList();
			}
		} catch (error) {
			console.log("Error creating BaseAccount account:", error);
		}
	};

	const getProgram = async () => {
		const idl = await Program.fetchIdl(programID, getProvider());
		if (idl) {
			return new Program(idl, programID, getProvider());
		}
	};

	const getGifList = async () => {
		try {
			const program = await getProgram();
			const account = await program?.account.baseAccount.fetch(
				baseAccount.publicKey
			);

			console.log("Got the account", account, typeof account?.gifList);
			//setGifList(account.gifList);
		} catch (error) {
			console.log("Error in getGifList: ", error);
		}
	};

	const sendGif = async () => {
		// if (inputValue.length > 0) {
		// 	console.log("Gif link:", inputValue);
		// 	setGifList([...gifList, inputValue]);
		// 	setInputValue("");
		// } else {
		// 	console.log("Empty input. Try again.");
		// }
	};

	const checkIfWalletIsConnected = async () => {
		//@ts-ignore
		if (window?.solana?.isPhantom) {
			console.log("Phantom wallet found!");
			//@ts-ignore
			const response = await window.solana.connect({ onlyIfTrusted: true });
			console.log("Connected with Public Key:", response.publicKey.toString());

			/*
			 * Set the user's publicKey in state to be used later!
			 */
			setWalletAddress(response.publicKey.toString());
		} else {
			alert("Solana object not found! Get a Phantom Wallet ðŸ‘»");
		}
	};

	const connectWallet = async () => {
		//@ts-ignore
		const { solana } = window;

		if (solana) {
			const response = await solana.connect();
			console.log("Connected with Public Key:", response.publicKey.toString());
			setWalletAddress(response.publicKey.toString());
		}
	};

	useEffect(() => {
		const onLoad = async () => {
			await checkIfWalletIsConnected();
		};
		window.addEventListener("load", onLoad);
		return () => window.removeEventListener("load", onLoad);
	}, []);

	useEffect(() => {
		if (walletAddress) {
			console.log("Fetching GIF list...");
			getGifList();
		}
	}, [walletAddress]);

	return (
		<Flex
			justify="center"
			align="center"
			bgColor="black"
			color="white"
			flexDir="column"
			minHeight="100vh"
		>
			<Head>
				<title>Solana App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Flex flexDir="column" textAlign="center" justify="center" align="center">
				<Heading fontSize="72px">ðŸ–¼ GIF Portal</Heading>
				<Heading fontSize="48px">
					View your GIF collection in the metaverse âœ¨
				</Heading>
				{walletAddress ? (
					<>
						<Text fontSize="24px">Connected to wallet: {walletAddress}</Text>
						<Flex
							flexDir="column"
							bgColor="grey"
							w="80vw"
							borderRadius="30px"
							padding="15px"
							justify="center"
							align="center"
						>
							{gifList.length > 0 ? <><Heading>Submit a GIF:</Heading>
							<Input
								padding="10px"
								borderRadius="20px"
								border="none"
								w="200px"
								value={inputValue}
								onChange={onInputChange}
								mb="20px"
							/>
							<Button
								bgColor="blue"
								w="200px"
								padding="10px"
								fontSize="18px"
								borderRadius="30px"
								border="none"
								color="white"
								onClick={sendGif}
							>
								Submit
							</Button></> : <Button onClick={createGifAccount}>Do One-Time Initialization For GIF Program Account</Button>}
							
						</Flex>
						<Heading>Your GIFs:</Heading>
						<Flex flexWrap="wrap" justify="center">
							{gifList.map((gif) => (
								<Flex key={gif} margin="20px">
									<Image src={gif} alt={gif} />
								</Flex>
							))}
						</Flex>
					</>
				) : (
					<Button
						bgColor="blue"
						padding="30px"
						fontSize="36px"
						borderRadius="30px"
						border="none"
						color="white"
						onClick={connectWallet}
					>
						Connect Phantom Wallet
					</Button>
				)}
			</Flex>
		</Flex>
	);
};

export default Home;
