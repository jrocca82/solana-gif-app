import type { NextPage } from "next";
import Head from "next/head";
import { Flex, Button, Text, Heading, Image, Input } from "@chakra-ui/react";
import { useState, useEffect, ChangeEvent } from "react";
import kp from "../constants/keypair.json";
import {
	Connection,
	PublicKey,
	clusterApiUrl,
	ConfirmOptions,
} from "@solana/web3.js";
import { Program, AnchorProvider, web3 } from "@project-serum/anchor";

type GifType = {
	gifLink: string;
	userAddress: PublicKey;
}

const Home: NextPage = () => {
	const [walletAddress, setWalletAddress] = useState<string>();
	const [inputValue, setInputValue] = useState("");
	const [gifList, setGifList] = useState<GifType[]>();

	const arr = Object.values(kp._keypair.secretKey);
	const secret = new Uint8Array(arr);
	const baseAccount = web3.Keypair.fromSecretKey(secret);

	const programID = new PublicKey(
		"DqDyFiVXaHVe52NC6MjD4e1Ftks1UCHVoQnkAHViWwjX"
	);
	const network = clusterApiUrl("devnet");
	const opts: ConfirmOptions = {
		preflightCommitment: "processed",
		maxRetries: 100,
	};

	const onInputChange = (event: ChangeEvent<HTMLInputElement>) => {
		setInputValue(event.target.value);
	};

	const getProvider = () => {
		const connection = new Connection(network, opts.preflightCommitment);
		const provider = new AnchorProvider(
			connection,
			//@ts-ignore
			window.solana,
			opts
		);
		return provider;
	};

	const getProgram = async () => {
		const idl = await Program.fetchIdl(programID, getProvider());
		if (idl) {
			return new Program(idl, programID, getProvider());
		}
	};

	const getGifList = async () => {
		try {
			const program = await getProgram();
			const account = await program?.account.baseAccount.fetch(
				baseAccount.publicKey
			);

			console.log("Got the account", account?.gifList);
			if(account){
				const gifs = account?.gifList as GifType[];
				setGifList(gifs);
			}
		} catch (error) {
			console.log("Error in getGifList: ", error);
		}
	};

	const sendGif = async () => {
		if (inputValue.length === 0) {
			console.log("No gif link given!");
			return;
		}
		setInputValue("");
		console.log("Gif link:", inputValue);
		try {
			const provider = getProvider();
			const program = await getProgram();

			if (program) {
				await program.methods
					.addGif(inputValue)
					.accounts({
						baseAccount: baseAccount.publicKey,
						user: provider.wallet.publicKey,
					})
					.rpc();
				console.log("GIF successfully sent to program", inputValue);
			}

			await getGifList();
		} catch (error) {
			console.log("Error sending GIF:", error);
		}
	};

	const checkIfWalletIsConnected = async () => {
		//@ts-ignore
		if (window?.solana?.isPhantom) {
			console.log("Phantom wallet found!");
			//@ts-ignore
			const response = await window.solana.connect({ onlyIfTrusted: true });
			console.log("Connected with Public Key:", response.publicKey.toString());

			/*
			 * Set the user's publicKey in state to be used later!
			 */
			setWalletAddress(response.publicKey.toString());
		} else {
			alert("Solana object not found! Get a Phantom Wallet ðŸ‘»");
		}
	};

	const connectWallet = async () => {
		//@ts-ignore
		const { solana } = window;

		if (solana) {
			const response = await solana.connect();
			console.log("Connected with Public Key:", response.publicKey.toString());
			setWalletAddress(response.publicKey.toString());
		}
	};

	useEffect(() => {
		const onLoad = async () => {
			await checkIfWalletIsConnected();
		};
		window.addEventListener("load", onLoad);
		return () => window.removeEventListener("load", onLoad);
	}, []);

	useEffect(() => {
		if (walletAddress) {
			console.log("Fetching GIF list...");
			getGifList();
		}
	}, [walletAddress]);

	return (
		<Flex
			justify="center"
			align="center"
			bgColor="black"
			color="white"
			flexDir="column"
			minHeight="100vh"
		>
			<Head>
				<title>Solana Gif Portal</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Flex flexDir="column" textAlign="center" justify="center" align="center">
				<Heading fontSize="72px">ðŸ–¼ Solana GIF Portal</Heading>
				<Heading fontSize="48px">
					View your GIF collection in the metaverse with Solana âœ¨
				</Heading>
				{walletAddress ? (
					<>
						<Text fontSize="24px">Connected to wallet: {walletAddress}</Text>
						<Flex
							flexDir="column"
							bgColor="grey"
							w="80vw"
							borderRadius="30px"
							padding="15px"
							justify="center"
							align="center"
						>
							<>
								<Heading>Submit a GIF:</Heading>
								<Input
									padding="10px"
									borderRadius="20px"
									border="none"
									w="200px"
									value={inputValue}
									onChange={onInputChange}
									mb="20px"
								/>
								<Button
									bgColor="blue"
									w="200px"
									padding="10px"
									fontSize="18px"
									borderRadius="30px"
									border="none"
									color="white"
									onClick={sendGif}
								>
									Submit
								</Button>
							</>
						</Flex>
						<Heading>Submitted GIFs:</Heading>
						<Flex flexWrap="wrap" justify="center">
							{gifList?.map((gif) => (
								<Flex key={gif.gifLink.concat(gif.userAddress.toString())} margin="20px" flexDir="column">
									<Image src={gif.gifLink} alt={gif.gifLink} />
									<Text>Submitted by: {gif.userAddress.toString()}</Text>
								</Flex>
							))}
						</Flex>
					</>
				) : (
					<Button
						bgColor="blue"
						padding="30px"
						fontSize="36px"
						borderRadius="30px"
						border="none"
						color="white"
						onClick={connectWallet}
					>
						Connect Phantom Wallet
					</Button>
				)}
			</Flex>
		</Flex>
	);
};

export default Home;
